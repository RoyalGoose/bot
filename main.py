import telebot
from telebot import apihelper
from telebot import types
from telebot.types import Message

from const import TOKEN
from const import PROXY
from menu import Keyboard
from menu import InlineKeyboard

import time
import sqlite3
import getRowOperands
import getFilterText
import actions

bot = telebot.TeleBot(token=TOKEN, threaded=False)
apihelper.proxy = {'socks5': PROXY}

# chat id 433242252

rooms = 0
square = 0
choice = 0
dist = ' '
price = 0
opernum = 0
flat = ' '
rcount = 0
a = ''
userid = 0
firstname = ''
lastname = ''
username = ''
flag = 0

# def getRow(id: int, rnum: int):
#     dbConn = sqlite3.connect("CIAN.db")
#     cursor = dbConn.cursor()
#     row = cursor.execute("SELECT * FROM Flat1 ORDER BY P2 ASC LIMIT 1 OFFSET {}".format(rnum)).fetchone()
#     if row:
#         return str(row[id])


def getRow(id: int, rnum: int, flat: int, square, dist, price):
    global rcount
    flat = getRowOperands.getflat(flat)
    square = getRowOperands.getsquare(square)
    dist = getRowOperands.getdist(dist)
    price = getRowOperands.getprice(price)
    counter = 0
    w = 'WHERE '
    a = ' AND '
    request = ''
    if square != 'Any':
        if counter == 0:
            request = w + square
        else:
            request = request + a + square
        counter += 1
    if dist != 'Any':
        if counter == 0:
            request = w + dist
        else:
            request = request + a + dist
        counter += 1
    if price != 'Any':
        if counter == 0:
            request = w + price
        else:
            request = request + a + price
        counter += 1

    connection = sqlite3.connect("CIAN.db")
    cursor = connection.cursor()
    final = "SELECT * FROM {} {} ORDER BY P2 ASC LIMIT 1 OFFSET {}".format(flat, request, rnum)
    row = cursor.execute(final).fetchone()

    cfinal = "SELECT * FROM {} {}".format(flat, request)
    crow = cursor.execute(cfinal).fetchall()
    rcount = len(crow)

    if row is None:
        return 0
    else:
        return str(row[id])


@bot.message_handler(commands=["start"])
def start(m: Message):
    global userid, firstname, lastname, username
    userid = m.from_user.id
    firstname = m.from_user.first_name
    lastname = m.from_user.last_name
    username = m.from_user.username

    Keyboard.main_menu(m)
    # print(m.chat.id)
    # print(m.from_user.id)
    # print(m.from_user.first_name)
    # print(m.from_user.last_name)
    # print(m.from_user.username)
    print("chatid: " + m.chat.id +
          " ;userid: " + m.from_user.id +
          " ;firstname: " + m.from_user.first_name +
          " ;lastname: " + m.from_user.last_name +
          " ;username: " + m.from_user.username)
    # print("=========")


# @bot.message_handler(commands=["chat"])
def inline(m: Message):
    key = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton(text="NumberOne", callback_data="NumberOne")
    but_2 = types.InlineKeyboardButton(text="NumberTwo", callback_data="NumberTwo")
    but_3 = types.InlineKeyboardButton(text="NumberTree", callback_data="NumberTree")
    key.add(but_1, but_2, but_3)
    bot.send_message(m.chat.id, "–í–´–ë–ï–†–ò–¢–ï –ö–ù–û–ü–ö–£", reply_markup=key)


@bot.callback_query_handler(func=lambda c: True)
def inline(c):
    if c.data == 'NumberOne':
        bot.send_message(c.message.chat.id, '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ 1')
    if c.data == 'NumberTwo':
        bot.send_message(c.message.chat.id, '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ 2')
    if c.data == 'NumberTree':
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="NumberOne", callback_data="NumberOne")
        but_2 = types.InlineKeyboardButton(text="NumberTwo", callback_data="NumberTwo")
        but_3 = types.InlineKeyboardButton(text="NumberTree", callback_data="NumberTree")
        key.add(but_1, but_2, but_3)
        bot.send_message(c.message.chat.id, '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ 3', reply_markup=key)
    if c.data == "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû":
        bot.send_message(c.message.chat.id, '–û –Ω–∞—Å')
    if c.data == "Select":
        selectflat(c.message)


@bot.message_handler(content_types=['text'])
def message(m: Message):
    global rooms, square, choice, flat, dist, price, a, rcount, userid, firstname, lastname, username, flag
    userid = m.from_user.id
    firstname = m.from_user.first_name
    lastname = m.from_user.last_name
    username = m.from_user.username
    if m.text == '–ù–∞–π—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å üîé':
        choice = 0
        Keyboard.select_room(m)

    elif m.text == '–í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é ‚Ü©':
        Keyboard.main_menu(m)

    elif (m.text == '1 –∫–æ–º–Ω–∞—Ç–∞') | (m.text == '2 –∫–æ–º–Ω–∞—Ç—ã') | (m.text == '3 –∫–æ–º–Ω–∞—Ç—ã') | (m.text == '4 –∏ –±–æ–ª–µ–µ'):
        rooms = actions.changerooms(m)
        Keyboard.select_dist(m)

    elif m.text == '–¶–ê–û ‚è∫' or m.text == '–°–ê–û ‚¨Ü' or m.text == '‚Üó –°–í–ê–û' or m.text == '‚û° –í–ê–û' or m.text == '‚Üò –Æ–í–ê–û' or m.text == '–Æ–ê–û ‚¨á' or m.text == '–Æ–ó–ê–û ‚Üô' or m.text == '–ó–ê–û ‚¨Ö' or m.text == '–°–ó–ê–û ‚Üñ' or m.text == '–ù–ê–û (–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π)' or m.text == '–õ—é–±–æ–π üîÄ':
        dist = actions.changedist(m)
        Keyboard.select_square(m)

    elif m.text == '–ú–µ–Ω–µ–µ 50 –º¬≤' or m.text == '50-100 –º¬≤' or m.text == '100-200 –º¬≤' or m.text == '–ë–æ–ª–µ–µ 200 –º¬≤' or m.text == '–õ—é–±–∞—è –ø–ª–æ—â–∞–¥—å üåç':
        square = actions.changesqure(m)
        Keyboard.select_price(m)

    elif m.text == '<30 —Ç—ã—Å. —Ä—É–±' or m.text == '30-50 —Ç—ã—Å. —Ä—É–±' or m.text == '50-100 —Ç—ã—Å. —Ä—É–±' or m.text == '>100 —Ç—ã—Å. —Ä—É–±' or m.text == '–õ—é–±–∞—è —Ü–µ–Ω–∞ üí∞':
        price = actions.changeprice(m)
        text = ("–í–∞—à —Ñ–∏–ª—å—Ç—Ä: " +
                getFilterText.getflat(rooms) + " –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ " +
                getFilterText.getdist(dist) +
                getFilterText.getsquare(square) +
                getFilterText.getprice(price))
        bot.send_message(m.chat.id, text)
        Keyboard.show_menu_first(m)

    elif m.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚¨Ü':
        getRow(0, choice, rooms, square, dist, price)
        flag = 0
        Keyboard.show_menu(m, rcount)
        if getRow(0, choice, rooms, square, dist, price) == 0:
            Keyboard.norows(m)
        else:
            showflat(m)

    elif m.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚§¥' or m.text == '‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è' or m.text == '–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂' or m.text == '–í—ã–±—Ä–∞—Ç—å ‚úÖ':
        flag = 1
        if getRow(0, choice, rooms, square, dist, price) == 0:
            Keyboard.norows(m)
        else:
            if m.text == '–í—ã–±—Ä–∞—Ç—å ‚úÖ':
                selectflat(m)
            else:
                if m.text == '‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è':
                    if choice > 0:
                        choice -= 1
                    else:
                        choice = 0
                if m.text == '–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂':
                    if choice < rcount - 1:
                        choice += 1
                showflat(m)

    elif m.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì':
        bot.send_chat_action(m.chat.id, action="typing")
        bot.send_message(m.chat.id, '–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?')

    elif m.text == '–û –Ω–∞—Å üìù':
        bot.send_chat_action(m.chat.id, action="typing")
        bot.send_message(m.chat.id, '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    elif m.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû':
        # key = types.InlineKeyboardMarkup()
        # but_1 = types.InlineKeyboardButton(text="NumberOne", callback_data="NumberOne")
        # but_2 = types.InlineKeyboardButton(text="NumberTwo", callback_data="NumberTwo")
        # but_3 = types.InlineKeyboardButton(text="NumberTree", callback_data="NumberTree")
        # key.add(but_1, but_2, but_3)
        # bot.send_chat_action(m.chat.id, action="typing")
        # bot.send_message(m.chat.id, '–¢—É—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã', reply_markup=key)
        InlineKeyboard.box(m)

    elif m.text == '–ù–∞–∑–∞–¥':
        kek = 1
    else:
        bot.send_chat_action(m.chat.id, action='typing')
        bot.send_message(m.chat.id,
                         '–í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –∏ —É–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏')


def showflat(m: Message):
    global rooms, square, choice, flat, dist, price, a, rcount, userid, firstname, lastname, username, flag
    text = ("–í–∞—Ä–∏–∞–Ω—Ç " + str(choice + 1) + " –∏–∑ " + str(rcount))
    a = (str(getRow(0, choice, rooms, square, dist, price)) +
         " –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, –ø–ª–æ—â–∞–¥—å—é " +
         str(getRow(1, choice, rooms, square, dist, price))
         + "–º¬≤, –≤ " +
         str(getRow(5, choice, rooms, square, dist, price)) +
         "\n–¶–µ–Ω–∞: " +
         str(getRow(10, choice, rooms, square, dist, price)) +
         " —Ç—ã—Å. —Ä—É–±/–º–µ—Å—è—Ü")
    b = ' '
    media = []
    for i in range(3):
        if i == 0:
            media.append(types.InputMediaPhoto(getRow(i + 6, choice, rooms, square, dist, price), text))
        else:
            media.append(types.InputMediaPhoto(getRow(i + 6, choice, rooms, square, dist, price), b))
    flat = getRow(4, choice, rooms, square, dist, price)
    Keyboard.send_photo(m, media, choice, flag)
    key = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å ‚úÖ', callback_data='Select')
    key.add(button)
    bot.send_message(m.chat.id, a, reply_markup=key)


def selectflat(m: Message):
    global firstname, lastname, username
    if firstname is None:
        firstname = ' '
    if lastname is None:
        lastname = ' '
    if username is None:
        username = ' '
    data = (getRow(0, choice, rooms, square, dist, price) +
            ' –∫–æ–º–Ω–∞—Ç–∞, ' +
            getRow(1, choice, rooms, square, dist, price) +
            '–º¬≤,' + ' –≤ ' +
            getRow(5, choice, rooms, square, dist, price) +
            ', –ø–æ —Ü–µ–Ω–µ ' +
            getRow(10, choice, rooms, square, dist, price) +
            ' —Ç—ã—Å. —Ä—É–± ' +
            getRow(4, choice, rooms, square, dist, price))
    out = ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' +
           str(firstname) + ' ' +
           str(lastname) + ' @' +
           str(username) +
           " –≤—ã–±—Ä–∞–ª –∫–≤–∞—Ä—Ç–∏—Ä—É: \n" +
           str(data))
    bot.send_message(433242252, out)
    bot.send_message(318453750, out)
    # bot.send_message(318453750, out) ne robit
    out = ("–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
           + a +
           "\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º —Ä–∏–µ–ª—Ç–æ—Ä–æ–º @Azbuka19 –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã. –û–Ω —É–∂–µ –æ–ø–æ–≤–µ—â–µ–Ω –æ –≤–∞—à–µ–º –≤—ã–±–æ—Ä–µ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–∏—é –∂–µ —Å–µ–∫—É–Ω–¥—É")
    bot.send_message(userid, out)


while True:
    try:
        bot.polling(none_stop=True, interval=1, timeout=20)
    except Exception as E:
        print(E.args)
        time.sleep(2)
